# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-test using AI Type  and AI Model 

ROOST_METHOD_HASH=who_won_87f5b3664a
ROOST_METHOD_SIG_HASH=who_won_55f93b97b9


Scenario 1: Player 1 has a higher score.
Details:
  TestName: test_player1_wins
  Description: This test verifies that when player1_score is greater than player2_score, the function declares Player 1 as the winner.
Execution:
  Arrange: Define player1_score and player2_score where player1_score > player2_score.
  Act: Call the who_won function with player1_score and player2_score as arguments.
  Assert: The expected output is "Player 1 won".
Validation:
  This test ensures that the game logic successfully declares Player 1 as the winner when Player 1 has a higher score.

Scenario 2: Player 2 has a higher score.
Details:
  TestName: test_player2_wins
  Description: This test verifies that when player2_score is greater than player1_score, the function declares Player 2 as the winner.
Execution:
  Arrange: Define player1_score and player2_score where player2_score > player1_score.
  Act: Call the who_won function with player1_score and player2_score as arguments.
  Assert: The expected output is "Player 2 won".
Validation:
  This test ensures that the game logic successfully declares Player 2 as the winner when Player 2 has a higher score.

Scenario 3: Both players have the same score.
Details:
  TestName: test_draw
  Description: This test verifies that when players have equal scores, the function declares a draw.
Execution:
  Arrange: Define player1_score and player2_score, where player1_score = player2_score.
  Act: Call the who_won function with player1_score and player2_score as arguments.
  Assert: The expected output is "The match ended in a draw".
Validation:
  This test ensures that the function successfully handles the scenario where both players have equal scores and declares a draw.

Scenario 4: Testing with zero scores.
Details:
  TestName: test_zero_scores
  Description: This test examines how the function behaves when both players have zero scores.
Execution:
  Arrange: Define player1_score and player2_score as zero.
  Act: Call the who_won function with player1_score and player2_score as arguments.
  Assert: The expected output is "The match ended in a draw".
Validation:
  This verifies that the function correctly handles the scenario when no players score any points and correctly declares it as a draw as per the game rules.
"""

# ********RoostGPT********
import pytest
from HandCricket.main import who_won
from unittest.mock import patch

class Test_MainWhoWon:

    @pytest.mark.positive
    @patch('builtins.print')
    def test_player1_wins(self,mocked_print):
        player1_score = 100
        player2_score = 90
        who_won(player1_score, player2_score)
        assert mocked_print.call_args_list[4][0][0] == "Player 1 won"

    @pytest.mark.positive
    @patch('builtins.print')
    def test_player2_wins(self,mocked_print):
        player1_score = 80
        player2_score = 90
        who_won(player1_score, player2_score)
        assert mocked_print.call_args_list[4][0][0] == "Player 2 won"

    @pytest.mark.positive
    @patch('builtins.print')
    def test_draw(self,mocked_print):
        player1_score = 100
        player2_score = 100
        who_won(player1_score, player2_score)
        assert mocked_print.call_args_list[4][0][0] == "The match ended in a draw"

    @pytest.mark.negative
    @patch('builtins.print')
    def test_zero_scores(self,mocked_print):
        player1_score = 0
        player2_score = 0
        who_won(player1_score, player2_score)
        assert mocked_print.call_args_list[4][0][0] == "The match ended in a draw"
