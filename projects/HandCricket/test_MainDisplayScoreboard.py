# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-test using AI Type  and AI Model 

ROOST_METHOD_HASH=display_scoreboard_41d2872602
ROOST_METHOD_SIG_HASH=display_scoreboard_ed11966a39


Scenario 1: Validate the Scoreboard with Valid Score and Over
Details:
  TestName: test_valid_score_and_over
  Description: This test validates if the function displays the scores of the players and over correctly when valid scores and over are supplied.
Execution:
  Arrange: You'll want to initialize the parameters `player1_score`, `player2_score`, and `over` with valid integer values.
  Act: Invoke the function `display_scoreboard` with the initialized parameters.
  Assert: Check the output whether it correctly shows the score of Player 1, Player 2, and over.
Validation:
  This test verifies the primary functionality of the function which is to display the score for each player and over. If the function fails this test, it means it's not performing its main task of displaying scores correctly.

Scenario 2: Verify the Scoreboard with Negative Score Values
Details:
  TestName: test_negative_score_values
  Description: This test verifies if the function handles and displays negative score values correctly.
Execution:
  Arrange: Initialize `player1_score` and `player2_score` with negative integer values and `over` with a positive integer value.
  Act: Call the function `display_scoreboard` with these parameters.
  Assert: Validate whether the function correctly displays the negative score values.
Validation:
  In a real-world scenario, a player's score can't be negative. However, as we are not validating the scores in our function, testing with negative values is necessary to understand the function's behavior with such inputs.

Scenario 3: Verify the Behavior with Zero Over
Details:
  TestName: test_zero_over
  Description: This test intends to verify whether the function correctly handles the scenario when the over is zero.
Execution:
  Arrange: Initialize `player1_score` and `player2_score` with positive integer values and `over` with zero.
  Act: Invoke the `display_scoreboard` function with these parameters.
  Assert: Check that the function correctly displays "Over 1:" since in this function, we always display over as `over + 1`.
Validation:
  This scenario is important because in cricket, overs start from 0. This test ensures that our function correctly handles the edge case where over equals 0, and correctly displays it as over 1 in the scoreboard.
"""

# ********RoostGPT********
import pytest
from HandCricket.main import display_scoreboard

class Test_MainDisplayScoreboard:

    # Test Scenario 1: Validate the Scoreboard with Valid Score and Over
    @pytest.mark.valid
    def test_valid_score_and_over(self, capsys):
        # Arrange
        player1_score = 20
        player2_score = 30
        over = 2

        # Act
        display_scoreboard(player1_score, player2_score, over)

        # Assert
        captured = capsys.readouterr()
        assert "Over 3:" in captured.out
        assert "Player 1: 20 runs" in captured.out
        assert "Player 2: 30 runs" in captured.out

    # Test Scenario 2: Verify the Scoreboard with Negative Score Values
    @pytest.mark.negative
    def test_negative_score_values(self, capsys):
        # Arrange
        player1_score = -20
        player2_score = -30
        over = 2

        # Act
        display_scoreboard(player1_score, player2_score, over)

        # Assert
        captured = capsys.readouterr()
        assert "Over 3:" in captured.out
        assert "Player 1: -20 runs" in captured.out
        assert "Player 2: -30 runs" in captured.out

    # Test Scenario 3: Verify the Behavior with Zero Over
    @pytest.mark.positive
    def test_zero_over(self, capsys):
        # Arrange
        player1_score = 20
        player2_score = 30
        over = 0

        # Act
        display_scoreboard(player1_score, player2_score, over)

        # Assert
        captured = capsys.readouterr()
        assert "Over 1:" in captured.out
        assert "Player 1: 20 runs" in captured.out
        assert "Player 2: 30 runs" in captured.out
